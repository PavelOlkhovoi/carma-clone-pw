name: Experimental cache

on:
  workflow_dispatch:
  
jobs:
  create:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-node-key: ${{ steps.node-cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create folder
        run: mkdir my-folder && echo "cached content" > my-folder/file.txt

      - name: Show file content
        run: cat my-folder/file.txt

      - name: Generate cache key
        id: cache-key
        run: echo "key=my-cache-key-${{ hashFiles('my-folder/file.txt') }}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: my-folder
          key: ${{ steps.cache-key.outputs.key }}

      - name: add cismet-dev registry secret to .npmrc
        shell: bash
        run: |
          touch .npmrc
          echo "${{ secrets.CISMET_DEV_REGISTRY_SECRET_4_DOT_NPMRC }}" >> .npmrc
    

      - name: Generate node_modules cache key
        id: node-cache-key
        run: |
          echo "key=node-modules-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache-node
        with:
          path: node_modules
          key: ${{ steps.node-cache-key.outputs.key }}
  
      - name: Install Dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install

  use:
    runs-on: ubuntu-latest
    needs: create
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - uses: actions/cache@v4
        with:
          path: my-folder
          key: ${{ needs.create.outputs.cache-key }}
  
      - run: cat my-folder/file.txt

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Restore node_modules from cache
        id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.create.outputs.cache-node-key }}

      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Show cache key
        run: echo ${{ needs.create.outputs.cache-node-key }}
  
      - name: Show node_modules
        run: ls -la node_modules || echo "node_modules not found"

      - name: Verify GitHub CLI
        run: gh --version
      
      - name: Total cache size in this repo (bytes and human readable)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Sum all cache entries for this repo
          total_bytes=$(gh cache list --json sizeInBytes --jq 'map(.sizeInBytes) | add // 0')
          echo "Total cache size (bytes): $total_bytes"
      
          # Convert to human readable
          hr() { b=$1; d=''; s=0; S=(Bytes KB MB GB TB); while ((b > 1024 && s < 4)); do d="$(printf ".%02d" $(((b%1024)*100/1024)) )"; b=$(( b/1024 )); s=$(( s+1 )); done; echo "$b$d ${S[$s]}"; }
          echo "Total cache size (human): $(hr ${total_bytes:-0})"

      - name: Delete all caches
        run: gh cache delete --all

      # - name: Build project
      #   run: npx nx run x-and-ride:build --configuration=production