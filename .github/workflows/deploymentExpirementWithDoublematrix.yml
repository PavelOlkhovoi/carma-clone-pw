name: Deployment with double matrix

run-name: >
  ${{ (contains(github.event.head_commit.message, 'skip-deploy')||contains(github.event.head_commit.message, 'no-deploy')) && '💤💤💤 ' ||''}}
  ${{ github.event_name == 'workflow_dispatch' && '👨🏽‍💼 ' || github.event_name == 'repository_dispatch' && '🤖 ' || github.event_name == 'push' && '👨‍💻 ' }}
  ${{ github.event_name == 'repository_dispatch' && '(' || ''}}${{ github.event.client_payload.actor }}${{ github.event_name == 'repository_dispatch' && ')' || ''}} 
  :
  ${{ github.event.head_commit.message }}
  ${{ github.event.inputs['project-name'] || github.event.client_payload['project-name'] }} 
  ${{ (github.event.inputs['version-manipulator'] || github.event.client_payload['version-manipulator']) && '- 🔢' || '' }}  
  ${{ github.event.inputs['version-manipulator'] || github.event.client_payload['version-manipulator'] }}  
    -
  ${{ github.event.inputs.target || github.event.client_payload.target || github.ref_name }}-GitHub-runner
on:
  workflow_dispatch:
    inputs:
      project-name:
        description: "Please enter a project name"
        required: true
      version-manipulator:
        description: "Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease (Will change the version number of the project.)"
        required: false
      target:
        type: choice
        description: "Where should I deploy?"
        options:
          - live
          - dev
      create-docker-image:
        type: boolean
        description: Create a Docker image? 🐳

  push:
    branches:
      - main
  repository_dispatch:
    types: [trigger-workflow]

jobs:
  determine_projects:
    if: "(github.event.inputs['project-name'] || github.event.client_payload['project-name']) == '' && !contains(github.event.head_commit.message, 'skip-deploy') && !contains(github.event.head_commit.message, 'no-deploy')"
    runs-on: ubuntu-latest
    outputs:
      project_list: ${{ steps.set_up_matrix.outputs.project_list }}
      is_affected: ${{ steps.list_affected_projects.outputs.project_list != '' }}

    permissions:
      contents: read
      actions: read
      pages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Update Submodules
        run: git submodule update --remote --recursive
      - name: Print Collaboration Version numbers
        run: |
          echo "-------------------------------"
          echo "All Collaboration Submodules:"
          echo
          find libraries -type f -name "package.json" -path "*/*-submodule/package.json" \
          -exec sh -c 'dir=$(dirname "$1"); echo "$(basename "$dir"): $(grep -m1 \"version\" "$1" | sed -E "s/[[:space:]]*\"version\":[[:space:]]*\"([^\"]+)\",/\\1/")"' _ {} \;

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: add cismet-dev registry secret to .npmrc
        shell: bash
        run: |
          touch .npmrc
          echo "${{ secrets.CISMET_DEV_REGISTRY_SECRET_4_DOT_NPMRC }}" >> .npmrc
      - name: Install dependencies
        run: npm install

      - name: Set Directory as Safe
        run: |
          git config --local --add safe.directory "$GITHUB_WORKSPACE"

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: setSHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: ${{ steps.extract_branch.outputs.branch }}

      - run: |
          echo "BASE: ${{ steps.setSHAs.outputs.base }}"
          echo "HEAD: ${{ steps.setSHAs.outputs.head }}"

      - name: Load deployment configuration
        id: load_config
        run: |
          echo "load_config Projects in deployment" 
          config=$(cat deployment-config.json)
          project_keys=$(echo "$config" | jq -r '.projects | keys | map(@json) | @json')
          echo "project_keys=$project_keys" >> $GITHUB_ENV
          echo "Projects in deployment configuration: $project_keys"  # Debug output
          echo "::set-output name=deployment_projects::$project_keys"
      - name: Run nx command to show affected projects
        id: list_affected_projects
        run: |
          projects=$(npx nx show projects --affected -t build --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }})
          projects=$(echo $projects | tr '\n' ' ')
          echo "Affected projects: $projects"
          echo "::set-output name=project_list::$projects"
      # - name: Full Project list for debug reasons
      #   id: list_affected_projects
      #   run: |
      #     projects=$(echo -e "fuzzy-search-playground\nverkehrszeichenkataster\ne-auto-ladestation\ne2e-verkehrszeichenkataster\ncorona-praeventation\nluftmessstationen\ne2e-luftmessstationen\nparkscheinautomaten\nehrenamtskarte\ngeneric-topicmaps\npotenzialflaechen-online\ne2e-potenzialflaechen\nbaederkarte\nkita-finder\ndocument-viewer\ne2e-kita-finder\ne2e-verdis-desktop\nhochwasser\nstarkregen\ne2e-hochwasser\ne2e-starkregen\nklimaorte\nstadtplan\ne2e-klimaorte\ne2e-lagis-desktop\ne2e-stadtplan\nfnp-test\numweltalarm\ntailwind-playground\ntechdemo\nverdis-desktop\ncismap-playground\nlagis-desktop\nvector\nbelis-online")
      #     projects=$(echo $projects | tr '\n' ' ')
      #     echo "::set-output name=project_list::$projects"
      - name: Set up matrix
        if: steps.list_affected_projects.outputs.project_list != ''
        id: set_up_matrix
        run: |
          # Convert the string into an array by splitting on spaces
          #IFS=' ' read -r -a project_array <<< "${{ steps.list_affected_projects.outputs.project_list }}"

          projects=$(echo "${{ steps.list_affected_projects.outputs.project_list }}")
          deployments=$(echo "${{ steps.load_config.outputs.deployment_projects }}"  | jq -r '.[]' | tr '\n' ' ')

          # Convert the string into arrays by splitting on spaces
          IFS=' ' read -r -a project_array <<< "$projects"
          IFS=' ' read -r -a deployment_array <<< "$deployments"

          # Declare an empty array to store the common elements
          result_array=()



          # Print the content of deployment_array for debugging
          # echo "Deployment String: $deployments"
          # echo "Deployment array content: ${deployment_array[@]}"
          #echo "project_array content: ${project_array[@]}"

          # Declare an empty array to store the common elements
          result_array=()

          # Iterate over each element in project_array
          for project in "${project_array[@]}"; do
              # Check if the project exists in deployment_array
              if [[ " ${deployment_array[@]} " =~ " ${project} " ]]; then
                  # If it exists, add it to the result_array
                  result_array+=("$project")
              fi
          done

          # Construct the JSON string manually
          result_json="["
          for ((i=0; i<${#result_array[@]}; i++)); do
              if [[ $i -ne 0 ]]; then
                  result_json="$result_json, "
              fi
              result_json="$result_json\"${result_array[i]}\""
          done
          result_json="$result_json]"

          # Print the result JSON
          # echo "$result_json"
          echo "::set-output name=project_list::$result_json"
          echo "PROJECT_LIST=${result_json}" >> $GITHUB_ENV
      - name: Show project list
        run: |
          echo "The project list is |${{ steps.set_up_matrix.outputs.project_list }}|"
          echo "Is affected: ${{ steps.list_affected_projects.outputs.project_list != '' }}"
  build:
    needs: determine_projects
    runs-on: ubuntu-latest
    if: ${{ needs.determine_projects.outputs.is_affected == 'true' && (github.event.inputs['project-name'] || github.event.client_payload['project-name']) == '' && needs.determine_projects.outputs.project_list != '[]' }}

    permissions:
      contents: write
      pages: write
      id-token: write
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_projects.outputs.project_list) }}

    steps:
      # The steps for building and deploying the projects
      # using the same matrix logic for each project...
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Update Submodules
        run: git submodule update --remote --recursive
      - name: Print Collaboration Version numbers
        run: |
          echo "-------------------------------"
          echo "All Collaboration Submodules:"
          echo
          find libraries -type f -name "package.json" -path "*/*-submodule/package.json" \
          -exec sh -c 'dir=$(dirname "$1"); echo "$(basename "$dir"): $(grep -m1 \"version\" "$1" | sed -E "s/[[:space:]]*\"version\":[[:space:]]*\"([^\"]+)\",/\\1/")"' _ {} \;

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Read project config
        id: read_project_config
        run: echo "::set-output name=config::$(cat deployment-config.json)"
        shell: bash

      - name: Extract branch name build
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Debug branch variable
        run: echo "branch variable" ${{ steps.extract_branch.outputs.branch }}

      - name: Process deploy steps
        id: process_deploy_steps
        run: |
          config=$(cat deployment-config.json)


          project_name="${{ matrix.project }}"
          branch="${{ steps.extract_branch.outputs.branch }}"


          # Directly check the structure
          # echo "$config" | jq -r ".projects[\"$project_name\"]"
          # echo "$config" | jq -r ".projects[\"$project_name\"].deployment"
          # echo "$config" | jq -r ".projects[\"$project_name\"].deployment.auto"
          # echo "$config" | jq -r ".projects[\"$project_name\"].deployment.auto[\"$branch\"]"

          # Ensure jq variables are passed correctly
          deploymentManual=$(echo "$config" | jq -r --arg project "$project_name" --arg branch "$branch" '.projects[$project].deployment.auto[$branch].repo // "null"')
          baseUrl=$(echo "$config" | jq -r --arg project "$project_name" --arg branch "$branch" '.projects[$project].deployment.auto[$branch].base // "null"')
          additionalEnvs=$(echo "$config" | jq -r --arg project "$project_name" --arg branch "$branch" '.projects[$project].deployment.manual[$branch].pages.envs // [] | join(" ")')
          orgDeploy=$(echo "$config" | jq -r --arg project "$project_name" --arg branch "$branch" '.projects[$project].deployment.auto[$branch].pages.org // "null"')
          prjDeploy=$(echo "$config" | jq -r --arg project "$project_name" --arg branch "$branch" '.projects[$project].deployment.auto[$branch].pages.prj // "null"')
          projectPath=$(echo "$config" | jq -r --arg project "$project_name" '.projects[$project].projectPath // "null"')
          containerImage=$(echo "$config" | jq -r --arg project "$project_name" --arg branch "$branch" '.projects[$project].deployment.auto[$branch].container.image // "null"')


          srcPath=".${projectPath#./dist}/src"
          echo "srcPath: $srcPath"  # Debugging

          srcMD5="$(echo -n $(find $srcPath -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -f 1 -d ' ')$(md5sum package.json package-lock.json | md5sum | cut -f 1 -d ' ') | md5sum | cut -f 1 -d ' ')"
          srcMD5short="${srcMD5:0:4}"

          # Debugging
          # echo "deploymentManual: $deploymentManual"
          # echo "baseUrl: $baseUrl"
          # echo "orgDeploy: $orgDeploy"
          # echo "prjDeploy: $prjDeploy"
          # echo "projectPath: $projectPath"
          # echo "containerImage: $containerImage"        
          # echo "srcMD5: $srcMD5"
          # echo "srcMD5short: $srcMD5short"

          if [ "${baseUrl}" = "null" ]; then
            if [ "${orgDeploy}" = "null" ]; then
              baseUrl="/"
            else
              baseUrl="https://${orgDeploy}.github.io/${prjDeploy}/"
            fi
          else
            baseUrl="${baseUrl}"
          fi
          if [ "${deploymentManual}" = "null" ]; then
            deployment_project="${orgDeploy}/${prjDeploy}"
          else
            deployment_project="${deploymentManual}"
          fi


          echo "PROJECT_NAME=${{ matrix.project }}" >> $GITHUB_ENV
          echo "EXTERNAL_REPO=${deployment_project}" >> $GITHUB_ENV
          echo "BASE_URL=${baseUrl}" >> $GITHUB_ENV
          echo "PROJECT_PATH=${projectPath}" >> $GITHUB_ENV
          echo "ORG_DEPLOY=${orgDeploy}" >> $GITHUB_ENV
          echo "PRJ_DEPLOY=${prjDeploy}" >> $GITHUB_ENV
          echo "SRC_MD5=${srcMD5}" >> $GITHUB_ENV
          echo "SRC_MD5_SHORT=${srcMD5short}" >> $GITHUB_ENV
          echo "SRC_PATH=${srcPath}" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=${containerImage}" >> $GITHUB_ENV
          echo "TARGET=auto.${branch}" >> $GITHUB_ENV
          echo "ADDITIONAL_ENVS=${additionalEnvs}" >> $GITHUB_ENV

        shell: bash
      - name: Create version.json if it doesn't exist
        run: |
          if [[ ! -f "$SRC_PATH/version.json" ]]; then
            echo '{"version": "0.0.0"}' > "$SRC_PATH/version.json"
          fi
        shell: bash
      - name: Add further info to version.json
        run: |
          jq --arg md5 "$SRC_MD5" --arg triggered "$TARGET" \
          '. + {md5: $md5, triggered: $triggered}' \
          "$SRC_PATH/version.json" > /tmp/version.json

          mv /tmp/version.json "$SRC_PATH/version.json"
        shell: bash
      - name: Read version from version.json
        run: |
          version=$(jq -r '.version // "0.0.0"' "$SRC_PATH/version.json")
          echo "VERSION=$version" >> $GITHUB_ENV
        shell: bash

      - name: Debug Outputs
        run: |
          echo -----------------------------------
          echo "-- Project name is: $PROJECT_NAME"
          echo "ORG_DEPLOY: $ORG_DEPLOY"
          echo "PROJECT_PATH: $PRJ_DEPLOY"
          echo "BASE_URL: $BASE_URL"
          echo "EXTERNAL_REPO: $EXTERNAL_REPO"
          echo "SRC_PATH: $SRC_PATH"
          echo "SRC_MD5: $SRC_MD5"
          echo "CONTAINER_IMAGE: $CONTAINER_IMAGE"
          echo "TARGET: $TARGET"
          echo "VERSION: $VERSION"
          echo "ADDITIONAL_ENVS: $ADDITIONAL_ENVS"
          echo -----------------------------------
      - name: Debug version.json
        run: |
          cat $SRC_PATH/version.json
      - name: Set version (deprectated)
        run: |
          if [[ -f "$SRC_PATH/version.js" ]]; then
            sed -i "s/%APPLICATION_VERSION%/$SRC_MD5_SHORT/" $SRC_PATH/version.js
          else
            if [[ -f "$SRC_PATH/app/version.js" ]]; then
              sed -i "s/%APPLICATION_VERSION%/$SRC_MD5_SHORT/" $SRC_PATH/app/version.js
            else
              echo "No version.js file found. Version information will not be updated."
            fi
          fi
      - name: Set hash (deprecated)
        run: |
          if [[ -f "$SRC_PATH/version.js" ]]; then
            sed -i "s/%APPLICATION_HASH%/$SRC_MD5/" $SRC_PATH/version.js
          else
            if [[ -f "$SRC_PATH/app/version.js" ]]; then
              sed -i "s/%APPLICATION_HASH%/$SRC_MD5/" $SRC_PATH/app/version.js
            else
              echo "No version.js file found. Hash information will not be updated."
            fi
          fi


      # Removed create nx-cloud.env

      - name: add cismet-dev registry secret to .npmrc
        shell: bash
        run: |
          touch .npmrc
          echo "${{ secrets.CISMET_DEV_REGISTRY_SECRET_4_DOT_NPMRC }}" >> .npmrc

      - name: Install Dependencies
        run: npm install

      - name: Build project
        run: |
          ${{ env.ADDITIONAL_ENVS }} npx nx run ${{ matrix.project }}:build --configuration=production --base="${{ env.BASE_URL }}" --output-style=stream-without-prefixes
        shell: bash
        shell: bash
        run: |
          echo "All E2E projects: ${{ steps.list_all_e2e_projects.outputs.e2e_all_projects }}"
      
      - name: Check if E2E project exists and run tests
        shell: bash
        run: |
          e2e_proj="e2e-${{ matrix.project }}"
          echo "Checking for E2E project: $e2e_proj"
          
          if ! npx nx show project "$e2e_proj" >/dev/null 2>&1; then
            echo "❌ E2E project '$e2e_proj' not found - skipping tests"
          else
            echo "✅ E2E project '$e2e_proj' found - running tests"
            echo "Run tests for $e2e_proj"
            # Add your actual E2E test command here:
            # npx nx run "$e2e_proj":e2e
          fi

            
  collect_e2e_projects:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      e2e_project_list: ${{ steps.create_e2e_matrix.outputs.e2e_project_list }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          
      - name: add cismet-dev registry secret to .npmrc
        shell: bash
        run: |
          touch .npmrc
          echo "${{ secrets.CISMET_DEV_REGISTRY_SECRET_4_DOT_NPMRC }}" >> .npmrc
          
      - name: Install Dependencies
        run: npm install
        
      - name: Create E2E project matrix
        id: create_e2e_matrix
        shell: bash
        run: |
          # Get all projects from the build matrix
          projects='${{ needs.determine_projects.outputs.project_list }}'
          echo "Original projects: $projects"
          
          # Initialize array for E2E-capable projects
          e2e_projects=""
          
          # Parse the JSON array and check each project
          for project in $(echo "$projects" | jq -r '.[]'); do
            e2e_proj="e2e-$project"
            if npx nx show project "$e2e_proj" >/dev/null 2>&1; then
              echo "✅ Found E2E project for: $project"
              if [ -z "$e2e_projects" ]; then
                e2e_projects="\"$project\""
              else
                e2e_projects="$e2e_projects,\"$project\""
              fi
            else
              echo "❌ No E2E project for: $project"
            fi
          done
          
          # Convert to JSON array
          if [ -z "$e2e_projects" ]; then
            e2e_json="[]"
          else
            e2e_json="[$e2e_projects]"
          fi
          
          echo "E2E-capable projects: $e2e_json"
          echo "e2e_project_list=$e2e_json" >> $GITHUB_OUTPUT

  buildWithTests: 
    needs: [determine_projects, build, collect_e2e_projects]
    runs-on: ubuntu-latest
    if: ${{ needs.collect_e2e_projects.outputs.e2e_project_list != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.collect_e2e_projects.outputs.e2e_project_list) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          
      - name: add cismet-dev registry secret to .npmrc
        shell: bash
        run: |
          touch .npmrc
          echo "${{ secrets.CISMET_DEV_REGISTRY_SECRET_4_DOT_NPMRC }}" >> .npmrc
          
      - name: Install Dependencies
        run: npm install
        
      - name: Run E2E tests for project
        run: |
          e2e_proj="e2e-${{ matrix.project }}"
          echo "Running E2E tests for project: ${{ matrix.project }}"
          echo "E2E project: $e2e_proj"
          # npx nx run "$e2e_proj":e2e